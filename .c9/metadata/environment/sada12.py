{"filter":false,"title":"sada12.py","tooltip":"/sada12.py","undoManager":{"mark":62,"position":62,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["#"],"id":56}],[{"start":{"row":0,"column":1},"end":{"row":1,"column":0},"action":"insert","lines":["Exercise 1: Assigning variables, lists, and dictionaries",""],"id":57}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":58}],[{"start":{"row":2,"column":0},"end":{"row":11,"column":29},"action":"insert","lines":["# Python3.6  ","# Coding: utf-8  ","# Store the human preproinsulin sequence in a variable called preproinsulin:  ","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"  ","# Store the remaining sequence elements of human insulin in variables:  ","lsInsulin = \"malwmrllpllallalwgpdpaaa\"  ","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"  ","aInsulin = \"giveqcctsicslyqlenycn\"  ","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"  ","insulin = bInsulin + aInsulin"],"id":59}],[{"start":{"row":11,"column":29},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":60},{"start":{"row":12,"column":0},"end":{"row":13,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":13,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}",""],"id":61}],[{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":62}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"insert","lines":["#"],"id":63}],[{"start":{"row":15,"column":1},"end":{"row":16,"column":0},"action":"insert","lines":["Exercise 2: Using count() to count the numbers of each amino acid",""],"id":64}],[{"start":{"row":16,"column":0},"end":{"row":16,"column":18},"action":"insert","lines":["insulin.count(\"Y\")"],"id":65}],[{"start":{"row":16,"column":18},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":66}],[{"start":{"row":17,"column":0},"end":{"row":17,"column":25},"action":"insert","lines":["float(insulin.count(\"Y\"))"],"id":67}],[{"start":{"row":17,"column":25},"end":{"row":17,"column":27},"action":"insert","lines":["''"],"id":68}],[{"start":{"row":17,"column":26},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":69}],[{"start":{"row":17,"column":26},"end":{"row":18,"column":0},"action":"remove","lines":["",""],"id":70},{"start":{"row":17,"column":25},"end":{"row":17,"column":27},"action":"remove","lines":["''"]}],[{"start":{"row":17,"column":25},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":71}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":80},"action":"insert","lines":["seqCount = ({x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']})"],"id":72}],[{"start":{"row":18,"column":80},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":73}],[{"start":{"row":19,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":74}],[{"start":{"row":20,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["Exercise 3: Writing the net charge formula",""],"id":75}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"insert","lines":["#"],"id":76}],[{"start":{"row":21,"column":0},"end":{"row":21,"column":1},"action":"insert","lines":["p"],"id":77},{"start":{"row":21,"column":1},"end":{"row":21,"column":2},"action":"insert","lines":["H"]}],[{"start":{"row":21,"column":2},"end":{"row":21,"column":3},"action":"insert","lines":["="],"id":78},{"start":{"row":21,"column":3},"end":{"row":21,"column":4},"action":"insert","lines":["0"]}],[{"start":{"row":21,"column":4},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":79}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":17},"action":"insert","lines":["while (pH <= 14):"],"id":80}],[{"start":{"row":22,"column":17},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":81},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":23,"column":0},"end":{"row":27,"column":43},"action":"insert","lines":["netCharge = (","    +(sum({x: ((seqCount[x]*(10**pKR[x]))/((10**pH)+(10**pKR[x]))) \\","    for x in ['k','h','r']}.values()))","    -(sum({x: ((seqCount[x]*(10**pH))/((10**pH)+(10**pKR[x]))) \\","    for x in ['y','c','d','e']}.values())))"],"id":82}],[{"start":{"row":22,"column":5},"end":{"row":22,"column":6},"action":"remove","lines":[" "],"id":83}],[{"start":{"row":22,"column":5},"end":{"row":22,"column":6},"action":"insert","lines":[" "],"id":84}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"insert","lines":[" "],"id":85}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"remove","lines":[" "],"id":86}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"insert","lines":[" "],"id":87}],[{"start":{"row":27,"column":47},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":88},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":28,"column":4},"end":{"row":28,"column":42},"action":"insert","lines":["print('{0:.2f}'.format(pH), netCharge)"],"id":89}],[{"start":{"row":28,"column":42},"end":{"row":29,"column":0},"action":"insert","lines":["",""],"id":90},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":29,"column":4},"end":{"row":29,"column":10},"action":"insert","lines":["pH +=1"],"id":91}],[{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["    "],"id":92}],[{"start":{"row":28,"column":0},"end":{"row":28,"column":1},"action":"insert","lines":[" "],"id":93},{"start":{"row":28,"column":1},"end":{"row":28,"column":2},"action":"insert","lines":[" "]},{"start":{"row":28,"column":2},"end":{"row":28,"column":3},"action":"insert","lines":[" "]},{"start":{"row":28,"column":3},"end":{"row":28,"column":4},"action":"insert","lines":[" "]}],[{"start":{"row":29,"column":10},"end":{"row":30,"column":0},"action":"insert","lines":["",""],"id":94},{"start":{"row":30,"column":0},"end":{"row":30,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"remove","lines":[" "],"id":95}],[{"start":{"row":24,"column":2},"end":{"row":24,"column":3},"action":"remove","lines":[" "],"id":96},{"start":{"row":24,"column":1},"end":{"row":24,"column":2},"action":"remove","lines":[" "]},{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"remove","lines":[" "]},{"start":{"row":23,"column":13},"end":{"row":24,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":23,"column":13},"end":{"row":23,"column":14},"action":"remove","lines":[" "],"id":97}],[{"start":{"row":23,"column":76},"end":{"row":23,"column":77},"action":"remove","lines":["\\"],"id":98}],[{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"remove","lines":["    "],"id":99},{"start":{"row":24,"column":38},"end":{"row":25,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":24,"column":97},"end":{"row":24,"column":98},"action":"remove","lines":["\\"],"id":100}],[{"start":{"row":24,"column":97},"end":{"row":24,"column":98},"action":"insert","lines":[":"],"id":101}],[{"start":{"row":25,"column":4},"end":{"row":25,"column":5},"action":"insert","lines":[" "],"id":102},{"start":{"row":25,"column":5},"end":{"row":25,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":25,"column":46},"end":{"row":25,"column":47},"action":"remove","lines":[" "],"id":103}],[{"start":{"row":25,"column":46},"end":{"row":25,"column":47},"action":"insert","lines":[":"],"id":104}],[{"start":{"row":21,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["pH=0","while (pH <= 14):","netCharge = (+(sum({x: ((seqCount[x]*(10**pKR[x]))/((10**pH)+(10**pKR[x]))) ","    for x in ['k','h','r']}.values()))-(sum({x: ((seqCount[x]*(10**pH))/((10**pH)+(10**pKR[x]))) :","      for x in ['y','c','d','e']}.values()))) :  ","    print('{0:.2f}'.format(pH), netCharge)","    pH +=1","    "],"id":105},{"start":{"row":21,"column":0},"end":{"row":39,"column":11},"action":"insert","lines":["pH = 0","while pH <= 14:","    # Positive groups (lysine, histidine, arginine)","    pos_charge = sum(","        (seqCount[x] * (10.0**pKR[x])) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['k', 'h', 'r']","    )","    ","    # Negative groups (tyrosine, cysteine, aspartic acid, glutamic acid)","    neg_charge = sum(","        (seqCount[x] * (10.0**pH)) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","    ","    netCharge = pos_charge - neg_charge","    ","    print('{0:.2f}'.format(pH), netCharge)","    ","    pH += 1"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["'"],"id":106},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["'"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["'"]}],[{"start":{"row":39,"column":11},"end":{"row":39,"column":12},"action":"insert","lines":["'"],"id":107},{"start":{"row":39,"column":12},"end":{"row":39,"column":13},"action":"insert","lines":["'"]},{"start":{"row":39,"column":13},"end":{"row":39,"column":14},"action":"insert","lines":["'"]}],[{"start":{"row":39,"column":14},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":108},{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"insert","lines":["    "]},{"start":{"row":40,"column":4},"end":{"row":41,"column":0},"action":"insert","lines":["",""]},{"start":{"row":41,"column":0},"end":{"row":41,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":41,"column":4},"end":{"row":79,"column":0},"action":"insert","lines":["# Store the human preproinsulin sequence in a variable called preproinsulin:  ","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"  ","","# Store the remaining sequence elements of human insulin in variables:  ","lsInsulin = \"malwmrllpllallalwgpdpaaa\"  ","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"  ","aInsulin = \"giveqcctsicslyqlenycn\"  ","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"  ","insulin = bInsulin + aInsulin","","# pKR values","pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}","","# Count amino acids (lowercase)","seqCount = {x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']}","","print(\"Amino acid counts:\", seqCount)  # <-- Debug check","","# Net charge calculation","pH = 0","while pH <= 14:","    # Positive groups","    pos_charge = sum(","        (seqCount[x] * (10.0**pKR[x])) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['k', 'h', 'r']","    )","    ","    # Negative groups","    neg_charge = sum(","        (seqCount[x] * (10.0**pH)) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","    ","    netCharge = pos_charge - neg_charge","    ","    print('{0:.2f}'.format(pH), netCharge)","    ","    pH += 1",""],"id":109}],[{"start":{"row":42,"column":0},"end":{"row":42,"column":1},"action":"insert","lines":["'"],"id":110},{"start":{"row":42,"column":1},"end":{"row":42,"column":2},"action":"insert","lines":["'"]},{"start":{"row":42,"column":2},"end":{"row":42,"column":3},"action":"insert","lines":["'"]}],[{"start":{"row":39,"column":13},"end":{"row":39,"column":14},"action":"remove","lines":["'"],"id":112},{"start":{"row":39,"column":12},"end":{"row":39,"column":13},"action":"remove","lines":["'"]},{"start":{"row":39,"column":11},"end":{"row":39,"column":12},"action":"remove","lines":["'"]}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":3},"action":"remove","lines":["''"],"id":113},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["'"]}],[{"start":{"row":0,"column":0},"end":{"row":39,"column":11},"action":"remove","lines":["#Exercise 1: Assigning variables, lists, and dictionaries","","# Python3.6  ","# Coding: utf-8  ","# Store the human preproinsulin sequence in a variable called preproinsulin:  ","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"  ","# Store the remaining sequence elements of human insulin in variables:  ","lsInsulin = \"malwmrllpllallalwgpdpaaa\"  ","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"  ","aInsulin = \"giveqcctsicslyqlenycn\"  ","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"  ","insulin = bInsulin + aInsulin","","pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}","","#Exercise 2: Using count() to count the numbers of each amino acid","insulin.count(\"Y\")","float(insulin.count(\"Y\"))","seqCount = ({x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']})","","#Exercise 3: Writing the net charge formula","pH = 0","while pH <= 14:","    # Positive groups (lysine, histidine, arginine)","    pos_charge = sum(","        (seqCount[x] * (10.0**pKR[x])) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['k', 'h', 'r']","    )","    ","    # Negative groups (tyrosine, cysteine, aspartic acid, glutamic acid)","    neg_charge = sum(","        (seqCount[x] * (10.0**pH)) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","    ","    netCharge = pos_charge - neg_charge","    ","    print('{0:.2f}'.format(pH), netCharge)","    ","    pH += 1"],"id":114},{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["#Exercise 1: Assigning variables, lists, and dictionaries","","# Python3.6  ","# Coding: utf-8  ","# Store the human preproinsulin sequence in a variable called preproinsulin:  ","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"  ","# Store the remaining sequence elements of human insulin in variables:  ","lsInsulin = \"malwmrllpllallalwgpdpaaa\"  ","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"  ","aInsulin = \"giveqcctsicslyqlenycn\"  ","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"  ","insulin = bInsulin + aInsulin","","# pKR values","pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}","","#Exercise 2: Using count() to count the numbers of each amino acid","insulin.count(\"y\")   # <-- use lowercase (not \"Y\")","float(insulin.count(\"y\"))","seqCount = ({x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']})","","# Debug: show counts","print(\"Amino acid counts:\", seqCount)","","#Exercise 3: Writing the net charge formula","pH = 0","while pH <= 14:","    # Positive groups (lysine, histidine, arginine)","    pos_charge = sum(","        (seqCount[x] * (10.0**pKR[x])) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['k', 'h', 'r']","    )","    ","    # Negative groups (tyrosine, cysteine, aspartic acid, glutamic acid)","    neg_charge = sum(","        (seqCount[x] * (10.0**pH)) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","    ","    netCharge = pos_charge - neg_charge","    ","    print('{0:.2f}'.format(pH), netCharge)","    ","    pH += 1",""]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":11},"action":"remove","lines":["#Exercise 1: Assigning variables, lists, and dictionaries","","# Python3.6  ","# Coding: utf-8  ","# Store the human preproinsulin sequence in a variable called preproinsulin:  ","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"  ","# Store the remaining sequence elements of human insulin in variables:  ","lsInsulin = \"malwmrllpllallalwgpdpaaa\"  ","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"  ","aInsulin = \"giveqcctsicslyqlenycn\"  ","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"  ","insulin = bInsulin + aInsulin","","# pKR values","pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}","","#Exercise 2: Using count() to count the numbers of each amino acid","insulin.count(\"y\")   # <-- use lowercase (not \"Y\")","float(insulin.count(\"y\"))","seqCount = ({x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']})","","# Debug: show counts","print(\"Amino acid counts:\", seqCount)","","#Exercise 3: Writing the net charge formula","pH = 0","while pH <= 14:","    # Positive groups (lysine, histidine, arginine)","    pos_charge = sum(","        (seqCount[x] * (10.0**pKR[x])) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['k', 'h', 'r']","    )","    ","    # Negative groups (tyrosine, cysteine, aspartic acid, glutamic acid)","    neg_charge = sum(","        (seqCount[x] * (10.0**pH)) / ((10.0**pH) + (10.0**pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","    ","    netCharge = pos_charge - neg_charge","    ","    print('{0:.2f}'.format(pH), netCharge)","    ","    pH += 1"],"id":115},{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["#Exercise 1: Assigning variables, lists, and dictionaries","","# Python3.6","# Coding: utf-8","# Store the human preproinsulin sequence in a variable called preproinsulin:","preproInsulin = \"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn\"","# Store the remaining sequence elements of human insulin in variables:","lsInsulin = \"malwmrllpllallalwgpdpaaa\"","bInsulin = \"fvnqhlcgshlvealylvcgergffytpkt\"","aInsulin = \"giveqcctsicslyqlenycn\"","cInsulin = \"rreaedlqvgqvelgggpgagslqplalegslqkr\"","insulin = bInsulin + aInsulin","","# pKR values","pKR = {'y': 10.07, 'c': 8.18, 'k': 10.53, 'h': 6.00, 'r': 12.48, 'd': 3.65, 'e': 4.25}","","#Exercise 2: Using count() to count the numbers of each amino acid","insulin.count(\"y\")   # lowercase","float(insulin.count(\"y\"))","seqCount = {x: float(insulin.count(x)) for x in ['y', 'c', 'k', 'h', 'r', 'd', 'e']}","","# Debug: show counts","print(\"Amino acid counts:\", seqCount)","","#Exercise 3: Writing the net charge formula","pH = 0","while pH <= 14:","    # Positive groups (lysine, histidine, arginine)","    pos_charge = sum(","        (seqCount[x] * (10.0 ** pKR[x])) / ((10.0 ** pH) + (10.0 ** pKR[x]))","        for x in ['k', 'h', 'r']","    )","","    # Negative groups (tyrosine, cysteine, aspartic acid, glutamic acid)","    neg_charge = sum(","        (seqCount[x] * (10.0 ** pH)) / ((10.0 ** pH) + (10.0 ** pKR[x]))","        for x in ['y', 'c', 'd', 'e']","    )","","    netCharge = pos_charge - neg_charge","","    print('{0:.2f}'.format(pH), netCharge)","","    pH += 1",""]}],[{"start":{"row":84,"column":11},"end":{"row":84,"column":12},"action":"insert","lines":["'"],"id":116},{"start":{"row":84,"column":12},"end":{"row":84,"column":13},"action":"insert","lines":["'"]},{"start":{"row":84,"column":13},"end":{"row":84,"column":14},"action":"insert","lines":["'"]}],[{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":117}],[{"start":{"row":46,"column":0},"end":{"row":46,"column":1},"action":"insert","lines":["#"],"id":118},{"start":{"row":46,"column":1},"end":{"row":46,"column":2},"action":"insert","lines":["o"]},{"start":{"row":46,"column":2},"end":{"row":46,"column":3},"action":"insert","lines":["r"]}],[{"start":{"row":46,"column":3},"end":{"row":46,"column":4},"action":"insert","lines":["-"],"id":119},{"start":{"row":46,"column":4},"end":{"row":46,"column":5},"action":"insert","lines":["-"]},{"start":{"row":46,"column":5},"end":{"row":46,"column":6},"action":"insert","lines":["-"]},{"start":{"row":46,"column":6},"end":{"row":46,"column":7},"action":"insert","lines":["-"]},{"start":{"row":46,"column":7},"end":{"row":46,"column":8},"action":"insert","lines":["-"]},{"start":{"row":46,"column":8},"end":{"row":46,"column":9},"action":"insert","lines":["-"]},{"start":{"row":46,"column":9},"end":{"row":46,"column":10},"action":"insert","lines":["-"]},{"start":{"row":46,"column":10},"end":{"row":46,"column":11},"action":"insert","lines":["-"]},{"start":{"row":46,"column":11},"end":{"row":46,"column":12},"action":"insert","lines":["-"]},{"start":{"row":46,"column":12},"end":{"row":46,"column":13},"action":"insert","lines":["-"]},{"start":{"row":46,"column":13},"end":{"row":46,"column":14},"action":"insert","lines":["-"]},{"start":{"row":46,"column":14},"end":{"row":46,"column":15},"action":"insert","lines":["-"]},{"start":{"row":46,"column":15},"end":{"row":46,"column":16},"action":"insert","lines":["-"]},{"start":{"row":46,"column":16},"end":{"row":46,"column":17},"action":"insert","lines":["-"]},{"start":{"row":46,"column":17},"end":{"row":46,"column":18},"action":"insert","lines":["-"]},{"start":{"row":46,"column":18},"end":{"row":46,"column":19},"action":"insert","lines":["-"]},{"start":{"row":46,"column":19},"end":{"row":46,"column":20},"action":"insert","lines":["-"]},{"start":{"row":46,"column":20},"end":{"row":46,"column":21},"action":"insert","lines":["-"]},{"start":{"row":46,"column":21},"end":{"row":46,"column":22},"action":"insert","lines":["-"]},{"start":{"row":46,"column":22},"end":{"row":46,"column":23},"action":"insert","lines":["-"]},{"start":{"row":46,"column":23},"end":{"row":46,"column":24},"action":"insert","lines":["-"]},{"start":{"row":46,"column":24},"end":{"row":46,"column":25},"action":"insert","lines":["-"]},{"start":{"row":46,"column":25},"end":{"row":46,"column":26},"action":"insert","lines":["-"]},{"start":{"row":46,"column":26},"end":{"row":46,"column":27},"action":"insert","lines":["-"]},{"start":{"row":46,"column":27},"end":{"row":46,"column":28},"action":"insert","lines":["-"]},{"start":{"row":46,"column":28},"end":{"row":46,"column":29},"action":"insert","lines":["-"]},{"start":{"row":46,"column":29},"end":{"row":46,"column":30},"action":"insert","lines":["-"]},{"start":{"row":46,"column":30},"end":{"row":46,"column":31},"action":"insert","lines":["-"]},{"start":{"row":46,"column":31},"end":{"row":46,"column":32},"action":"insert","lines":["-"]},{"start":{"row":46,"column":32},"end":{"row":46,"column":33},"action":"insert","lines":["-"]},{"start":{"row":46,"column":33},"end":{"row":46,"column":34},"action":"insert","lines":["-"]},{"start":{"row":46,"column":34},"end":{"row":46,"column":35},"action":"insert","lines":["-"]},{"start":{"row":46,"column":35},"end":{"row":46,"column":36},"action":"insert","lines":["-"]},{"start":{"row":46,"column":36},"end":{"row":46,"column":37},"action":"insert","lines":["-"]},{"start":{"row":46,"column":37},"end":{"row":46,"column":38},"action":"insert","lines":["-"]},{"start":{"row":46,"column":38},"end":{"row":46,"column":39},"action":"insert","lines":["-"]},{"start":{"row":46,"column":39},"end":{"row":46,"column":40},"action":"insert","lines":["-"]},{"start":{"row":46,"column":40},"end":{"row":46,"column":41},"action":"insert","lines":["-"]}]]},"ace":{"folds":[],"scrolltop":1065,"scrollleft":0,"selection":{"start":{"row":43,"column":11},"end":{"row":43,"column":11},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":75,"state":"qstring3","mode":"ace/mode/python"}},"timestamp":1759466372087,"hash":"ccf92e75b431ad2a2dcd969f04c3fff92003ef77"}